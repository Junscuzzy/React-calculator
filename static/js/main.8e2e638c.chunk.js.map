{"version":3,"sources":["Result.js","Touch.js","CalcLogic.js","Calculator.js","serviceWorker.js","index.js"],"names":["Result","_ref","result","react_default","a","createElement","className","propDefault","Touch","text","style","touchClick","onClick","defaultProps","execCalc","tmp","operator","calc","Number","b","toString","TouchList","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lastTouched","lastNumber","setState","output","_r","indexOf","split","substr","getResult","_this2","src_Result","map","index","src_Touch","key","touchClicked","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Calculator_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e2e638c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Result = ({result}) => <div className=\"Result\">{result}</div>;\n\nResult.propTypes = {result: PropTypes.string.isRequired};\nResult.propDefault = {result: '0'};\n\nexport default Result;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Touch = ({text, style, touchClick}) => (\n    <div className={'Touch ' + style} onClick={() => touchClick(text)}>{text}</div>\n);\n\nTouch.propTypes = {\n    text: PropTypes.string,\n    style: PropTypes.string,\n    touchClick: PropTypes.func\n};\n\nTouch.defaultProps = {text: '', style: ''};\n\nexport default Touch;","export default function getResult(text, state) {\n    let output,\n        {tmp, operator, lastTouched, result, lastNumber} = state,\n        _r = Number(result) === 0 ? '' : result.toString(),\n        operatorList = ['รท', 'x', '-', '+'],\n        numberList = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.'];\n\n    // Basics operators\n    if (operatorList.indexOf(text) !== -1) {\n        output = tmp && lastTouched === 'number' ? execCalc(_r, tmp, operator) : _r;\n        operator = text;\n        tmp = output;\n        lastTouched = 'ope';\n    }\n\n    // Number Touchs\n    if (numberList.indexOf(text) !== -1) {\n        if (lastTouched !== 'number') {\n            output = text;\n            if (lastTouched === '=') {\n                tmp = 0;\n                operator = '';\n            }\n        } else {\n            output = _r + text;\n        }\n        lastTouched = 'number';\n    }\n\n    // Clear all\n    if (text === 'AC') {\n        output = 0;\n        operator = '';\n        tmp = '';\n        lastTouched = '';\n        lastNumber = '';\n    }\n\n    // Negative touch\n    if (text === \"+/-\") {\n        output = _r.split('')[0] !== '-' ? '-' + _r : _r.substr(1);\n    }\n\n    // Percents\n    if (text === '%') {\n        output = !tmp ? _r / 100 : (_r * tmp) / 100;\n    }\n\n    // Total\n    if (text === \"=\") {\n        if (lastTouched === '=') {\n            output = execCalc(_r, lastNumber, operator);\n            lastNumber = '';\n        } else {\n            output = execCalc(_r, tmp, operator);\n            lastNumber = result;\n        }\n        lastTouched = '=';\n        tmp = result;\n    }\n\n    // return new state\n    return {\n        tmp: tmp,\n        operator: operator,\n        result: output.toString(),\n        lastTouched: lastTouched,\n        lastNumber: lastNumber,\n    };\n}\n\nfunction execCalc(result, tmp, operator) {\n\n    let a = Number(tmp),\n        b = Number(result),\n        calc;\n    switch (operator) {\n        case '-':\n            calc = a - b;\n            break;\n        case 'รท':\n            calc = a / b;\n            break;\n        case 'x':\n            calc = a * b;\n            break;\n        case '+':\n            calc = a + b;\n            break;\n        default:\n            calc = b;\n            break;\n    }\n    return calc.toString()\n}","import React, {Component} from 'react';\nimport Result from './Result';\nimport './Calculator.css';\nimport Touch from \"./Touch\";\nimport getResult from \"./CalcLogic\";\n\nconst TouchList = [\n    {text: 'AC', style: ''},\n    {text: '+/-', style: ''},\n    {text: '%', style: ''},\n    {text: 'รท', style: 'Touch--orange'},\n    {text: '7', style: ''},\n    {text: '8', style: ''},\n    {text: '9', style: ''},\n    {text: 'x', style: 'Touch--orange'},\n    {text: '4', style: ''},\n    {text: '5', style: ''},\n    {text: '6', style: ''},\n    {text: '-', style: 'Touch--orange'},\n    {text: '1', style: ''},\n    {text: '2', style: ''},\n    {text: '3', style: ''},\n    {text: '+', style: 'Touch--orange'},\n    {text: '0', style: 'Touch--0'},\n    {text: '.', style: ''},\n    {text: '=', style: 'Touch--orange'},\n];\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tmp: 0,\n            operator: '',\n            lastTouched: '',\n            result: '0',\n            lastNumber: ''\n        };\n    }\n\n    touchClicked(text) {\n        this.setState(getResult(text, this.state))\n    }\n\n    render() {\n        return (\n            <div className=\"Calculator\">\n                <div className=\"container\">\n                    <Result result={this.state.result}/>\n                    <div className=\"grid\">\n                        {TouchList.map(({text, style}, index) => (\n                            <Touch\n                                text={text}\n                                style={style}\n                                key={index}\n                                touchClick={this.touchClicked.bind(this)}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}